[{"id":"11e9553a.ee16ab","type":"ui_tab","z":"345a65f8.cba59a","name":"Home","icon":"dashboard","order":"1"},{"id":"4aa7f610.b55808","type":"ui_script","z":"345a65f8.cba59a","tab":"11e9553a.ee16ab","name":"","group":"Foo","order":1,"format":"<port></port>\n<script>\nconsole.log(\"this\",this)\nvar toLoad = [\n    \"../js/UI/CircularJson.js\",\n    \"../js/Models/Persistance/pouchdb-3.4.0.min.js\",\n    \"../js/Models/Persistance/pouchdb.localstorage.js\",\n    \"../js/Models/Persistance/pouchdb.transform-pouch.js\",\n    \"../js/Models/Persistance/pouchdb.find.js\",\n    \"../js/Models/Persistance/pouchdb.upsert.js\",\n    \"../js/Models/Persistance/pouch-crypto.js\",\n    \"../js/Models/Persistance/store.pouchdb.js\",\n    \"../js/UI/qrcode.js\",\n    \"../js/Models/AppModel.js\",\n    \"../js/Models/ChatTip.js\",\n    \"../js/Models/Peer.js\",\n    \"../js/Models/Me.js\",\n    \"../js/Models/Identity.js\",\n    \"../js/Models/Vault.js\",\n    \"../js/Crypto/crypto-min.js\",\n    \"../js/Crypto/crypto-sha256.js\",\n    \"../js/Crypto/crypto-sha256-hmac.js\",\n    \"../js/Crypto/ripemd160.js\",\n    \"../js/Crypto/aes.js\",\n    \"../js/Crypto/ellipticcurve.js\",\n    \"../js/Crypto/Bitcore/bitcore.min.js\",\n    \"../js/Crypto/Bitcore/bitcore-mnemonic.js\",\n    \"../js/Crypto/Bitcore/bitcore-ecies.min.js\",\n    \"../js/Crypto/Bitcore/bitcore-message.js\",\n    \"../js/Crypto/Bitcore/bitcore-p2p.js\",\n    \"../js/Crypto/Bitcore/bitcore-explorers-multi.js\",\n    \"../js/Crypto/Ethereum/web3.js\",\n    \"../js/Crypto/Ethereum/ethereumjs-accounts.js\",\n    \"../js/Crypto/Ethereum/ethereumjs-tx.js\",\n    \"../js/Crypto/Ethereum/walletimport.js\"]\n    \nhead.load(toLoad, function() {\n    // Call a function when done\n    console.log(\"Done loading js\");\n    setTimeout(function(){init()},1000)\n});\n    /*var perform = function(payload){\n        console.log(\"written by javascript: \"+payload)\n    }*/\n</script>","storeOutMessages":false,"fwdInMessages":false,"x":464,"y":713,"wires":[["a02d1cdf.83365"]]},{"id":"a02d1cdf.83365","type":"ui_template","z":"345a65f8.cba59a","tab":"11e9553a.ee16ab","name":"Identity","group":"Login","order":1,"format":"<div class=\"out\"></div>\n<div id=\"qrcode\"></div>\n<div class=\"log\"></div>\n<port></port>\n<script>\n var CircularJSON = window.CircularJSON\n    var debug = getQueryParams(document.location.search).debug\n    var verbose = true\n    oldconsole = window.console\n    function customLog(msg) {\n       oldconsole.log(\"Hooked \"+msg)\n       msg = \"<br>----------------<br>\" + msg\n       \n       $(\".log\").html($(\".log\").html() + \"\\r\\n\"+msg)\n    }\n    if (debug) {\n        window.console = {\n            log: function(msg) { customLog(CircularJSON.stringify(msg)) },\n            info: function(msg) { customLog(CircularJSON.stringify(msg)) },\n            warn: function(msg) { customLog(CircularJSON.stringify(msg)) }\n        }\n        window.onerror = function(errorMsg, url, lineNumber){\n            console.log(\"Error: \"+ errorMsg + \" \\r\\nScript:  \"+ url + \"\\r\\nLine: \"+lineNumber)\n        }\n        var cmd = getQueryParams(document.location.search).eval\n        if (cmd)\n            eval(cmd)\n    }\n    function init(){\n        accounts = new Accounts({minPassphraseLength: 6});\n        foundIdentity = []\n        bitcore = require('bitcore')\n        Mnemonic = require('bitcore-mnemonic');\n        ECIES = require('bitcore-ecies')\n        explorers = require('bitcore-explorers-multi')\n        bitcore.Networks.AvailableNetworks.set(\"ethereum\")\n        var insight = bitcore.Networks.AvailableNetworks.currentNetwork().insight\n        //console.log(CircularJSON.stringify(me))\n        \n        //Lookup Identity      \n        isReady(function(){\n            lookupIdentity()\n        })\n    }\n    function isReady(cb){\n        console.log(me.data.privkey)\n        console.log(\"Ready: \"+me.data.privkey.table.taskqueue.isReady)\n        if (me.data.privkey.table.taskqueue.isReady) {\n            return cb()\n        } else {\n            console.log(\"waiting...\")\n            setTimeout(function(){\n                return isReady(cb)\n            },500)\n        }\n    }\n    \n    function lookupIdentity(){\n        console.log(foundIdentity)\n        newtables.privkey.allRecordsArray(function (rows) {\n            if (rows) {\n                $.each(rows, function () {\n                    var record = $(this)[0]\n                    if (!record.isIdentity) {\n                        record.address = record.key.address\n                        foundIdentity.push(record)\n                    }\n                })                              \n            }         \n            createIdentityIfNew(function(identity){\n                console.log(\"sending\")\n                send(\"Login\", {topic: \"Logged In\", payload: identity.address || identity.key.address})\n                //$(\".out\").html(identity.address || identity.key.address)\n            })\n        })\n        //console.log(\"issue\")\n    }\n    \n    function createIdentityIfNew(cb){\n        if (foundIdentity.length < 1) { \n            me.password = generatePassword()            \n            newtables.privkey.newIdentity(\"Identity\",function(out) {\n                newtables.privkey.allRecordsArray(function (rows) {\n                    $.each(rows, function () {\n                        var record = $(this)[0]\n                        if (record.isIdentity) {\n                            foundIdentity.push(record.key)\n                            newtables.privkey.newHD(\"EthIdentity\", function(record) {\n                                foundIdentity = []\n                                newtables.privkey.allRecordsArray(function (rows) {\n                                    $.each(rows, function () {\n                                        var record = $(this)[0]\n                                        if (!record.isIdentity) {\n                                            $(this)[0].isIdentity = true\n                                            foundIdentity.push(record.key)\n                                            console.log(record)\n                                            getMyMnemonic(me.password,function(mnemonic){\n                                                generateQr(mnemonic+\"|\"+me.password)\n                                            })\n                                            return cb(record)\n                                        } else {\n                                            //return cb(null)\n                                        }\n                                    })\n                                })\n                            })\n                        }\n                    })\n                })\n            })\n        } else {\n            return cb(foundIdentity[0])\n        }\n    }\n    function generatePassword(){\n        var randomstring = Math.random().toString(36).slice(-8)\n        return randomstring\n    }\n    function getQueryParams(qs) {\n        qs = qs.split('+').join(' ')\n        var params = {}, tokens, re = /[?&]?([^=]+)=([^&]*)/g\n        while (tokens = re.exec(qs)) {\n            params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2])\n        }\n        return params;\n    }\n    \n    function send(name, payload){\n        console.log(\"SEND\")\n        if (typeof payload !== 'object') {\n            payload = {payload: payload}\n        }\n        angular.element(panel(name,\"Default\").find(\"port\")).scope().send(payload)\n    }\n    function panel(name, orname) {\n        if (angular.element($(\"[panel='\"+name+\"']\")).length > 0) {\n            return angular.element($(\"[panel='\"+name+\"']\").parent())\n        } \n        if(angular.element($(\"[panel='\"+orname+\"']\")).length > 0) {\n            return angular.element($(\"[panel='\"+orname+\"']\").parent())\n        }\n        var panel = angular.element($(\"md-card-content\").find(\"h2:contains('\"+name+\"')\").parent())\n        if (panel.length > 0) {\n            return angular.element($(\"md-card-content\").find(\"h2:contains('\"+name+\"')\").parent())\n        }\n        return angular.element($(\"md-card-content\").find(\"h2:contains('\"+orname+\"')\").parent())\n    }\n\n</script>","storeOutMessages":false,"fwdInMessages":false,"x":590,"y":622,"wires":[["efa4e1d3.35925","1976d866.cf0ab8"]]},{"id":"1976d866.cf0ab8","type":"ui_toast","z":"345a65f8.cba59a","name":"","x":760,"y":575,"wires":[]},{"id":"37aaed3d.1fbfb2","type":"http in","z":"345a65f8.cba59a","name":"","url":"/editor-backend","method":"put","swaggerDoc":"","x":234,"y":135,"wires":[["672a5403.c642fc","dc1a925.3ee937"]]},{"id":"9e450680.9fd698","type":"http in","z":"345a65f8.cba59a","name":"","url":"/editor-backend","method":"get","swaggerDoc":"","x":318,"y":93,"wires":[["30971695.465eca"]]},{"id":"672a5403.c642fc","type":"delay","z":"345a65f8.cba59a","name":"","pauseType":"delay","timeout":"15","timeoutUnits":"milliseconds","rate":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":429,"y":135,"wires":[["2fe11ce9.f9dd24"]]},{"id":"dc1a925.3ee937","type":"file","z":"345a65f8.cba59a","name":"","filename":"public/api-spec/spec.yaml","appendNewline":false,"createDir":false,"overwriteFile":"true","x":487,"y":174,"wires":[]},{"id":"2fe11ce9.f9dd24","type":"file in","z":"345a65f8.cba59a","name":"","filename":"public/api-spec/spec.yaml","format":"utf8","x":620,"y":135,"wires":[["80acad5a.181c1"]]},{"id":"30971695.465eca","type":"file in","z":"345a65f8.cba59a","name":"","filename":"public/api-spec/spec.yaml","format":"utf8","x":535,"y":93,"wires":[["2530e25a.044cfe"]]},{"id":"2530e25a.044cfe","type":"http response","z":"345a65f8.cba59a","name":"","x":714,"y":93,"wires":[]},{"id":"80acad5a.181c1","type":"http response","z":"345a65f8.cba59a","name":"","x":796,"y":135,"wires":[]}]