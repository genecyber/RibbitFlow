{
  "_args": [
    [
      "hooked-web3-provider@git://github.com/genecyber/hooked-web3-provider.git",
      "c:\\repo\\node-red\\node-red\\node_modules\\node-red-contrib-ui"
    ]
  ],
  "_from": "git://github.com/genecyber/hooked-web3-provider.git",
  "_id": "hooked-web3-provider@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/hooked-web3-provider",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/genecyber/hooked-web3-provider/master/package.json",
      "gitUrl": "git://github.com/genecyber/hooked-web3-provider.git",
      "httpsUrl": "git+https://github.com/genecyber/hooked-web3-provider.git",
      "shortcut": "github:genecyber/hooked-web3-provider",
      "ssh": "git@github.com:genecyber/hooked-web3-provider.git",
      "sshUrl": "git+ssh://git@github.com/genecyber/hooked-web3-provider.git",
      "type": "github"
    },
    "name": "hooked-web3-provider",
    "raw": "hooked-web3-provider@git://github.com/genecyber/hooked-web3-provider.git",
    "rawSpec": "git://github.com/genecyber/hooked-web3-provider.git",
    "scope": null,
    "spec": "git://github.com/genecyber/hooked-web3-provider.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/node-red-contrib-ui"
  ],
  "_resolved": "git://github.com/genecyber/hooked-web3-provider.git#3ae3a4846cb56a9027696c97db6d6e19a9694c1c",
  "_shasum": "68315c9e5aad2a60d06d1f912b33757842ba8bd0",
  "_shrinkwrap": null,
  "_spec": "hooked-web3-provider@git://github.com/genecyber/hooked-web3-provider.git",
  "_where": "c:\\repo\\node-red\\node-red\\node_modules\\node-red-contrib-ui",
  "author": {
    "name": "Tim Coulter"
  },
  "bugs": {
    "url": "https://github.com/consensys/hooked-web3-provider/issues"
  },
  "dependencies": {
    "web3": "0.15.1"
  },
  "description": "A Web3 Provider that has hooks for a key provider and transaction signer",
  "devDependencies": {
    "bignumber.js": "*",
    "ethereumjs-accounts": "git+https://github.com/tcoulter/ethereumjs-accounts.git",
    "jquery": "*"
  },
  "gitHead": "3ae3a4846cb56a9027696c97db6d6e19a9694c1c",
  "homepage": "https://github.com/consensys/hooked-web3-provider#readme",
  "license": "MIT License. Copyright Consensys LLC, and authors. All rights reserved.",
  "main": "build/hooked-web3-provider.js",
  "name": "hooked-web3-provider",
  "optionalDependencies": {},
  "private": false,
  "readme": "# Hooked Web3 Provider\r\n\r\nThe Hooked Web3 Provider is a normal HTTP Web3 provider that allows you to \"hook in\" an external transaction signer that can be used to sign transactions for accounts not managed by the Ethereum client (i.e., aren't managed by `geth`). An example transaction signer might be an external program or device that manages its own accounts and private keys. Together, the transaction signer and the web3 provider will use the Ethereum client to place signed transactions on the network.\r\n\r\nThe goal of this library is to successfully modularize all the moving parts related to external transaction signing, to improve usability and encourage a separation of concerns.\r\n\r\n### Install\r\n\r\n```\r\nnpm install hooked-web3-provider\r\n``` \r\n\r\n### Use\r\n\r\nFirst, include the package. In Node:\r\n\r\n```\r\nvar HookedWeb3Provider = require(\"hooked-web3-provider\");\r\n```\r\n\r\nOr the Browser:\r\n\r\n```\r\n<script type=\"text/javascript\" src=\"./build/hooked-web3-provider.js\"></script>\r\n```\r\n\r\nThen, instantiate the provider:\r\n\r\n```\r\nvar provider = new HookedWeb3Provider({\r\n  host: \"http://localhost:8545\",\r\n  transaction_signer: { \r\n    // Can be any object that implements the following methods:\r\n    hasAddress: function(address, callback) {...},\r\n    signTransaction: function(tx_params, callback) {...}\r\n  }\r\n});\r\n```\r\n\r\n### Transaction Signer Interface\r\n\r\nTransaction signers are bound by a simple interface. The object must contain two methods, described below.\r\n\r\n##### hasAddress(address, callback)\r\n\r\nAsynchronous method used to determine if the transaction signer manages the address passed in. We recommend the transaction signer account for addresses that start with \"0x\" as well as those that do not. \r\n\r\n######Arguments:\r\n\r\n* `string` - Address that will be checked. \r\n* `function(error, boolean)` - callback when finished. If an error occured, `error` will be non-null; otherwise it's null. Upon a successful request, the boolean value will represent whether or not the address is managed by the transaction signer.\r\n\r\n##### signTransaction(tx_params, callback)\r\n\r\nAsynchronous method used to sign a transaction. This method will only be called if `hasAddress` provides a value of `true` for a specific address. This method should sign a transaction based on the parameters. \r\n\r\n######Arguments\r\n\r\n* `object` - An object containing the transaction parameters. Example below.\r\n* `function(error, string)` - callback when finished signing. If an error occured, `error` will be non-null; otherwise it's null. If the transaction was successfully signed, the string reterned via the callback will be the raw, signed hash of the transaction. Example below.\r\n\r\n**Example Transaction Parameters: tx_params**\r\n\r\nNote that proper transaction parameters are those used by web3 in its RPC interface. All values are hexadecimal, and are prefixed with \"0x\".\r\n\r\n```\r\n{\r\n  from: \"0x985095ef977ba75fb2bb79cd5c4b84c81392dff6\",\r\n  gas: \"0x2fefd8\",\r\n  gasPrice: \"0xba43b7400\",\r\n  nonce: \"0x21\",\r\n  to: \"0x54450450e24286143a35686ad77a7c851ada01a0\",\r\n  value: \"0xde0b6b3a7640000\",\r\n  data: \"0x...\"\r\n}\r\n```\r\n\r\n**Example Raw Transaction Response**\r\n\r\nThe above example transaction parameters, when signed, would produce a raw, signed transaction like the following:\r\n\r\n```\r\n0xf86d21850ba43b7400832fefd89454450450e24286143a35686ad77a7c851ada01a0880de0b6b3a7640000801ba0c36fdbf8043a64a6096ee81da4de7f04def477b9a3210a18967fad07f72112b2a04aedfd1d9d9085256373b40ef02bc3da0a95054f40075de340086c9512707b29\r\n```\r\n\r\n### Example Use\r\n\r\nFor an example of this in action, see `./build/index.html` for a test application that uses the hooked provider in conjunction with ethereumjs-accounts.\r\n\r\n### Develop / Contribute\r\n\r\nTo develop and contribute to this project, first install Truffle:\r\n\r\n```\r\n$ npm install -g truffle\r\n```\r\n\r\nThen edit `./app/hooked-web3-provider.es6`, and run:\r\n\r\n```\r\ncd ./checkout/of/repository\r\n$ truffle build\r\n```\r\n\r\nYou can have Truffle build automatically as you make changes via:\r\n\r\n```\r\n$ truffle watch\r\n```\r\n\r\n### License\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/consensys/hooked-web3-provider.git"
  },
  "version": "1.0.0"
}
